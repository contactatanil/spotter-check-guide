<div class="assessment-interface-container">
    <div class="row">
        <!-- Header with Multi-Student Link -->
        <div class="col-12 mb-4">
            <div class="d-flex justify-content-between align-items-center">
                <h4><i class="fa fa-user-check"></i> {{#str}}studentassessment, mod_observationchecklist{{/str}}</h4>
                <a href="{{actionurl}}multi_student.php?id={{cmid}}" class="btn btn-primary">
                    <i class="fa fa-users"></i> {{#str}}multistudentobservation, mod_observationchecklist{{/str}}
                </a>
            </div>
        </div>

        <!-- Student Selector -->
        <div class="col-12 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fa fa-user-check"></i> {{#str}}individualstudentassessment, mod_observationchecklist{{/str}}</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="studentSelector" class="form-label">{{#str}}selectstudent, mod_observationchecklist{{/str}}:</label>
                            <select class="form-select" id="studentSelector" onchange="loadStudentAssessment()">
                                <option value="">{{#str}}choosestudent, mod_observationchecklist{{/str}}...</option>
                                {{#students}}
                                <option value="{{id}}">{{firstname}} {{lastname}} ({{email}})</option>
                                {{/students}}
                            </select>
                        </div>
                        <div class="col-md-6">
                            <div class="student-stats mt-3 mt-md-0">
                                <div id="studentStatsDisplay" style="display: none;">
                                    <div class="row text-center">
                                        <div class="col-4">
                                            <div class="stat-item">
                                                <div class="stat-number text-success" id="studentSatisfactory">0</div>
                                                <div class="stat-label">{{#str}}satisfactory, mod_observationchecklist{{/str}}</div>
                                            </div>
                                        </div>
                                        <div class="col-4">
                                            <div class="stat-item">
                                                <div class="stat-number text-danger" id="studentNotSatisfactory">0</div>
                                                <div class="stat-label">{{#str}}notsatisfactory, mod_observationchecklist{{/str}}</div>
                                            </div>
                                        </div>
                                        <div class="col-4">
                                            <div class="stat-item">
                                                <div class="stat-number text-info" id="studentProgress">0%</div>
                                                <div class="stat-label">{{#str}}progress, mod_observationchecklist{{/str}}</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Assessment Area -->
        <div class="col-12">
            <div id="assessmentItemsArea" style="display: none;">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">{{#str}}assessmentitems, mod_observationchecklist{{/str}}</h5>
                        <button class="btn btn-success btn-sm" onclick="saveAllAssessments()">
                            <i class="fa fa-save"></i> {{#str}}saveallassessments, mod_observationchecklist{{/str}}
                        </button>
                    </div>
                    <div class="card-body">
                        <div id="assessmentItemsList">
                            <!-- Items will be loaded here via JavaScript -->
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- No Student Selected -->
            <div id="noStudentMessage" class="card">
                <div class="card-body text-center py-5">
                    <i class="fa fa-user-plus fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">{{#str}}selectstudent, mod_observationchecklist{{/str}}</h5>
                    <p class="text-muted">{{#str}}choosestudentmessage, mod_observationchecklist{{/str}}</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Assessment Item Template -->
<div id="assessmentItemTemplate" style="display: none;">
    <div class="assessment-item card mb-3">
        <div class="card-body">
            <div class="row">
                <div class="col-md-8">
                    <h6 class="item-title"><!-- Title will be set via JavaScript --></h6>
                    <small class="text-muted item-category"><!-- Category will be set via JavaScript --></small>
                </div>
                <div class="col-md-4">
                    <div class="current-status mb-2">
                        <span class="badge current-status-badge"><!-- Status will be set via JavaScript --></span>
                    </div>
                </div>
            </div>
            
            <div class="assessment-controls mt-3">
                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label">{{#str}}assessmentstatus, mod_observationchecklist{{/str}}:</label>
                        <select class="form-select status-select">
                            <option value="not_started">{{#str}}notstarted, mod_observationchecklist{{/str}}</option>
                            <option value="in_progress">{{#str}}inprogress, mod_observationchecklist{{/str}}</option>
                            <option value="satisfactory">{{#str}}satisfactory, mod_observationchecklist{{/str}}</option>
                            <option value="not_satisfactory">{{#str}}notsatisfactory, mod_observationchecklist{{/str}}</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">{{#str}}assessornotes, mod_observationchecklist{{/str}}:</label>
                        <textarea class="form-control notes-textarea" rows="2" placeholder="{{#str}}addassessmentnotes, mod_observationchecklist{{/str}}" maxlength="1000"></textarea>
                        <small class="text-muted">{{#str}}maxcharacters, mod_observationchecklist{{/str}}: 1000</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let currentStudentId = null;
let checklistItems = [];
let cmId = {{cmid}};

// Load student assessment data
function loadStudentAssessment() {
    const studentSelector = document.getElementById('studentSelector');
    const studentId = studentSelector.value;
    
    if (!studentId) {
        hideStudentAssessment();
        return;
    }
    
    currentStudentId = studentId;
    
    // Show loading state
    showLoadingState();
    
    // Make AJAX call to get student progress
    fetch('{{actionurl}}ajax_get_student_progress.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `id=${cmId}&userid=${studentId}&sesskey={{sesskey}}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            displayStudentAssessment(data.student, data.items, data.progress);
        } else {
            console.error('Error loading student data:', data.error);
            showError('Failed to load student assessment data.');
        }
    })
    .catch(error => {
        console.error('Network error:', error);
        showError('Network error occurred while loading student data.');
    });
}

// Display student assessment interface
function displayStudentAssessment(student, items, progress) {
    // Update student statistics
    updateStudentStats(progress);
    
    // Show assessment area
    document.getElementById('assessmentItemsArea').style.display = 'block';
    document.getElementById('noStudentMessage').style.display = 'none';
    document.getElementById('studentStatsDisplay').style.display = 'block';
    
    // Load assessment items
    loadAssessmentItems(items, progress);
}

// Update student statistics display
function updateStudentStats(progress) {
    let satisfactory = 0;
    let notSatisfactory = 0;
    let total = 0;
    
    for (let itemId in progress) {
        total++;
        if (progress[itemId].status === 'satisfactory') {
            satisfactory++;
        } else if (progress[itemId].status === 'not_satisfactory') {
            notSatisfactory++;
        }
    }
    
    const progressPercentage = total > 0 ? Math.round(((satisfactory + notSatisfactory) / total) * 100) : 0;
    
    document.getElementById('studentSatisfactory').textContent = satisfactory;
    document.getElementById('studentNotSatisfactory').textContent = notSatisfactory;
    document.getElementById('studentProgress').textContent = progressPercentage + '%';
}

// Load assessment items into the interface
function loadAssessmentItems(items, progress) {
    const itemsList = document.getElementById('assessmentItemsList');
    const template = document.getElementById('assessmentItemTemplate');
    
    itemsList.innerHTML = '';
    checklistItems = items;
    
    items.forEach(item => {
        const itemElement = template.cloneNode(true);
        itemElement.style.display = 'block';
        itemElement.id = 'assessment-item-' + item.id;
        itemElement.setAttribute('data-itemid', item.id);
        
        // Set item content
        itemElement.querySelector('.item-title').textContent = item.itemtext;
        itemElement.querySelector('.item-category').textContent = item.category;
        
        // Set current status
        const currentProgress = progress[item.id];
        const currentStatus = currentProgress ? currentProgress.status : 'not_started';
        const statusBadge = itemElement.querySelector('.current-status-badge');
        
        updateStatusBadge(statusBadge, currentStatus);
        
        // Set form values
        const statusSelect = itemElement.querySelector('.status-select');
        const notesTextarea = itemElement.querySelector('.notes-textarea');
        
        statusSelect.value = currentStatus;
        if (currentProgress && currentProgress.assessornotes) {
            notesTextarea.value = currentProgress.assessornotes;
        }
        
        // Add event listeners
        statusSelect.addEventListener('change', function() {
            updateItemStatus(item.id, this.value, notesTextarea.value);
        });
        
        notesTextarea.addEventListener('blur', function() {
            updateItemStatus(item.id, statusSelect.value, this.value);
        });
        
        itemsList.appendChild(itemElement);
    });
}

// Update status badge appearance
function updateStatusBadge(badge, status) {
    badge.className = 'badge current-status-badge';
    
    switch (status) {
        case 'satisfactory':
            badge.classList.add('bg-success');
            badge.textContent = '{{#str}}satisfactory, mod_observationchecklist{{/str}}';
            break;
        case 'not_satisfactory':
            badge.classList.add('bg-danger');
            badge.textContent = '{{#str}}notsatisfactory, mod_observationchecklist{{/str}}';
            break;
        case 'in_progress':
            badge.classList.add('bg-warning');
            badge.textContent = '{{#str}}inprogress, mod_observationchecklist{{/str}}';
            break;
        default:
            badge.classList.add('bg-secondary');
            badge.textContent = '{{#str}}notstarted, mod_observationchecklist{{/str}}';
    }
}

// Update individual item status
function updateItemStatus(itemId, status, notes) {
    if (!currentStudentId) return;
    
    fetch('{{actionurl}}ajax_assess_item.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `id=${cmId}&userid=${currentStudentId}&itemid=${itemId}&status=${status}&notes=${encodeURIComponent(notes)}&sesskey={{sesskey}}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Update status badge
            const itemElement = document.getElementById('assessment-item-' + itemId);
            const statusBadge = itemElement.querySelector('.current-status-badge');
            updateStatusBadge(statusBadge, status);
            
            // Refresh statistics
            loadStudentAssessment();
        } else {
            console.error('Error updating assessment:', data.error);
            showError('Failed to save assessment.');
        }
    })
    .catch(error => {
        console.error('Network error:', error);
        showError('Network error occurred while saving assessment.');
    });
}

// Save all assessments at once
function saveAllAssessments() {
    if (!currentStudentId) {
        showError('No student selected.');
        return;
    }
    
    const assessments = [];
    const itemElements = document.querySelectorAll('[data-itemid]');
    
    itemElements.forEach(element => {
        const itemId = element.getAttribute('data-itemid');
        const status = element.querySelector('.status-select').value;
        const notes = element.querySelector('.notes-textarea').value;
        
        assessments.push({
            itemid: itemId,
            status: status,
            notes: notes
        });
    });
    
    fetch('{{actionurl}}ajax_save_all_assessments.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `id=${cmId}&userid=${currentStudentId}&assessments=${encodeURIComponent(JSON.stringify(assessments))}&sesskey={{sesskey}}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showSuccess('All assessments saved successfully.');
            loadStudentAssessment(); // Refresh the display
        } else {
            console.error('Error saving assessments:', data.error);
            showError('Failed to save all assessments.');
        }
    })
    .catch(error => {
        console.error('Network error:', error);
        showError('Network error occurred while saving assessments.');
    });
}

// Hide student assessment interface
function hideStudentAssessment() {
    document.getElementById('assessmentItemsArea').style.display = 'none';
    document.getElementById('noStudentMessage').style.display = 'block';
    document.getElementById('studentStatsDisplay').style.display = 'none';
    currentStudentId = null;
}

// Show loading state
function showLoadingState() {
    document.getElementById('assessmentItemsList').innerHTML = '<div class="text-center p-4"><i class="fa fa-spinner fa-spin"></i> Loading...</div>';
    document.getElementById('assessmentItemsArea').style.display = 'block';
    document.getElementById('noStudentMessage').style.display = 'none';
}

// Show error message
function showError(message) {
    const alert = document.createElement('div');
    alert.className = 'alert alert-danger alert-dismissible fade show';
    alert.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.querySelector('.assessment-interface-container').insertBefore(alert, document.querySelector('.row'));
    
    // Auto-dismiss after 5 seconds
    setTimeout(() => {
        if (alert.parentNode) {
            alert.remove();
        }
    }, 5000);
}

// Show success message
function showSuccess(message) {
    const alert = document.createElement('div');
    alert.className = 'alert alert-success alert-dismissible fade show';
    alert.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.querySelector('.assessment-interface-container').insertBefore(alert, document.querySelector('.row'));
    
    // Auto-dismiss after 3 seconds
    setTimeout(() => {
        if (alert.parentNode) {
            alert.remove();
        }
    }, 3000);
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    // Clear any existing student selection
    hideStudentAssessment();
});
</script>
